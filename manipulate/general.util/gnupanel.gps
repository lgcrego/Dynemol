#!/usr/bin/gnuplot

# Check if correct number of arguments are provided
if (ARGC != 5) {
    print "Usage: gnuplot -c panel_elhl.gp y_min y_max nf nrows ncolumns" 
    exit 1
}

# Assign command-line arguments to variables
y_min = ARGV[1]
y_max = ARGV[2]
nf = ARGV[3]
nrows = ARGV[4]
ncolumns = ARGV[5]

set terminal pngcairo enhanced font ",16"  size 1920,1080
set output "panel.png"
# Set the layout of the matrix 
set multiplot layout nrows,ncolumns 
set lmargin 0
set rmargin 0
set tmargin 0
set bmargin 0
set format ''

# Set y-axis range for each iteration
set yrange [y_min:y_max]

# Loop through each data file
do for [i=1:nf] {

    # Determine the format string based on nf
    format_string = (nf < 100) ? "./hl_data-%02d" : "./hl_data-%03d"

    # Use the format string to create the filename
    filename = sprintf(format_string, i)

    # Hide tick marks and labels
    unset xtics
    unset ytics
    unset xlabel
    unset ylabel

    # Check if file exists
    if (system(sprintf("test -e %s && echo 1 || echo 0", filename)) == "1\n") {
        # Plot the corresponding data file
        plot filename using 1:2 with lines lc rgb 'blue' lw 1.2 notitle
    } else {
        # Leave the graph blank
        plot NaN notitle
    }
}

do for [i=1:nf] {
    
    # Determine the format string based on nf
    format_string = (nf < 100) ? "./el_data-%02d" : "./el_data-%03d"

    # Use the format string to create the filename
    filename = sprintf(format_string, i)

    # Hide tick marks and labels
    unset xtics
    unset ytics
    unset xlabel
    unset ylabel

    # Check if file exists
    if (system(sprintf("test -e %s && echo 1 || echo 0", filename)) == "1\n") {
        # Plot the corresponding data file
        plot filename using 1:2 with lines lc rgb 'red' lw 1.2 notitle
    } else {
        # Leave the graph blank
        plot NaN notitle
    }
}




